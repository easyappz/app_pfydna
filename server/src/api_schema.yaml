openapi: 3.0.0
info:
  title: Easyappz API
  version: '1.0.0'
servers:
  - url: /api
paths:
  /points/rate:
    post:
      summary: Rate a photo (sequential point transfer with rollback)
      description: |
        Rewards the rater with +1 point, then deducts -1 point from the photo owner.
        If owner deduction fails (e.g., insufficient points), the rater reward is rolled back.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ownerId, rating]
              properties:
                ownerId:
                  type: string
                  description: User ID of the photo owner
                rating:
                  type: integer
                  description: Rating value (informational)
      responses:
        '200':
          description: Rating succeeded and points updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  rater:
                    type: object
                    properties:
                      id: { type: string }
                      points: { type: integer }
                  owner:
                    type: object
                    properties:
                      id: { type: string }
                      points: { type: integer }
        '400':
          description: Bad request (e.g., insufficient points or missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }

  /photos/activate:
    post:
      summary: Activate (upload) a photo with base64 validation
      description: |
        Validates base64 image size (<= 1MB), requires at least 1 point,
        deducts 1 point and stores the image base64 in DB.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [imageBase64]
              properties:
                imageBase64:
                  type: string
                  description: Base64-encoded image string (may include data URL prefix)
      responses:
        '201':
          description: Photo created and point deducted
          content:
            application/json:
              schema:
                type: object
                properties:
                  photo:
                    type: object
                    properties:
                      id: { type: string }
                      ownerId: { type: string }
                      data: { type: string }
                      active: { type: boolean }
                      createdAt: { type: string, format: date-time }
                  owner:
                    type: object
                    properties:
                      id: { type: string }
                      points: { type: integer }
        '400':
          description: Bad request (e.g., too big image, insufficient points)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
