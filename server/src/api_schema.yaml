openapi: 3.0.0
info:
  title: Easyappz API
  version: '1.5.0'
servers:
  - url: /
tags:
  - name: auth
  - name: users
  - name: photos
  - name: ratings
paths:
  /api/auth/register:
    post:
      tags: [auth]
      summary: Register a new user
      description: Creates a new user, returns JWT and public user profile. Initial points = 10.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
            examples:
              valid:
                value:
                  email: demo@example.com
                  password: secret123
      responses:
        '200':
          description: User registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token
                  user:
                    $ref: '#/components/schemas/UserPublic'
              examples:
                success:
                  value:
                    token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                    user:
                      id: '665f9a2e1c2b3a0012abcd01'
                      email: demo@example.com
                      name: null
                      points: 10
                      gender: null
                      age: null
                      filterSettings:
                        gender: any
                        ageFrom: null
                        ageTo: null
                      createdAt: '2025-01-01T10:00:00.000Z'
                      updatedAt: '2025-01-01T10:00:00.000Z'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalidEmail:
                  value:
                    error: Invalid email format
        '409':
          description: Email already registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                exists:
                  value:
                    error: Email already registered
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      tags: [auth]
      summary: Login with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string }
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  user: { $ref: '#/components/schemas/UserPublic' }
        '400':
          description: Missing fields
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          description: Server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/auth/me:
    get:
      tags: [auth]
      summary: Get current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  user: { $ref: '#/components/schemas/UserPublic' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          description: Server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/auth/request-reset:
    post:
      tags: [auth]
      summary: Request password reset code
      description: Creates a 6-digit reset code valid for 15 minutes. In test mode the code is returned in response.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email: { type: string, format: email }
      responses:
        '200':
          description: Reset created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  code: { type: string, description: 6-digit code }
                  expiresAt: { type: string, format: date-time }
        '400':
          description: Invalid email
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '404':
          description: User not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          description: Server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/auth/reset-password:
    post:
      tags: [auth]
      summary: Reset password by code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, code, newPassword]
              properties:
                email: { type: string, format: email }
                code: { type: string, description: 6-digit string }
                newPassword: { type: string, minLength: 6 }
      responses:
        '200':
          description: Password updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        '400':
          description: Validation error (invalid/expired/used code)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '404':
          description: User not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          description: Server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/users/me:
    get:
      tags: [users]
      summary: Get my user profile
      description: Returns the authenticated user's profile with filter settings.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/UserPublic'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          description: Server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    patch:
      tags: [users]
      summary: Update my profile fields
      description: Updates name, gender, and/or age for the authenticated user.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Trimmed; empty string clears the name
                  maxLength: 100
                  nullable: true
                gender:
                  type: string
                  enum: [male, female, other]
                  nullable: true
                age:
                  type: integer
                  minimum: 0
                  maximum: 120
                  nullable: true
      responses:
        '200':
          description: Updated user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/UserPublic'
        '400':
          description: Validation error or no fields provided
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '401': { description: Unauthorized }
        '404':
          description: User not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500': { description: Server error }

  /api/users/filter-settings:
    patch:
      tags: [users]
      summary: Update default filter settings
      description: |
        Updates the user's default filterSettings used to fetch photos for rating.
        Validations:
        - gender must be one of any|male|female|other
        - ageFrom and ageTo must be integers between 0 and 120 or null
        - if both provided (non-null), ageFrom must be <= ageTo
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                gender:
                  type: string
                  enum: [any, male, female, other]
                  nullable: true
                ageFrom:
                  type: integer
                  minimum: 0
                  maximum: 120
                  nullable: true
                ageTo:
                  type: integer
                  minimum: 0
                  maximum: 120
                  nullable: true
      responses:
        '200':
          description: Updated user profile with filter settings
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/UserPublic'
        '400':
          description: Validation error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '401': { description: Unauthorized }
        '404':
          description: User not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500': { description: Server error }

  /api/points/rate:
    post:
      tags: [ratings]
      summary: Rate a photo (atomic point transfer with rollback)
      description: |
        In a single ACID transaction: rewards the rater with +1 point and deducts -1 point from the photo owner.
        - ownerId must be a valid ObjectId, not equal to the rater's id.
        - Owner will not go below 0 points (operation is rejected if owner has 0).
        - If any step fails, the whole transaction is rolled back.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ownerId]
              properties:
                ownerId:
                  type: string
                  description: User ID of the photo owner
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                  description: Optional rating value (informational)
      responses:
        '200':
          description: Rating succeeded and points updated atomically
          content:
            application/json:
              schema:
                type: object
                properties:
                  rater: { $ref: '#/components/schemas/PointsBalance' }
                  owner: { $ref: '#/components/schemas/PointsBalance' }
        '400':
          description: Bad request (invalid fields or insufficient owner points or self-transfer)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          description: Server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/photos/activate:
    post:
      tags: [photos]
      deprecated: true
      summary: Deprecated legacy photo activation
      description: |
        Legacy endpoint. Use /api/photos/upload and /api/photos/{photoId}/toggle-active instead.
        Enforces 1MB decoded size limit and requires user to have at least 1 point to activate.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [imageBase64]
              properties:
                imageBase64:
                  type: string
      responses:
        '201':
          description: Legacy response
          content:
            application/json:
              schema:
                type: object
                properties:
                  photo:
                    type: object
                    properties:
                      id: { type: string }
                      ownerId: { type: string }
                      data: { type: string }
                      active: { type: boolean }
                      createdAt: { type: string, format: date-time }
                  owner:
                    $ref: '#/components/schemas/PointsBalance'
        '400': { description: Bad request }
        '401': { description: Unauthorized }
        '500': { description: Server error }

  /api/photos/upload:
    post:
      tags: [photos]
      summary: Upload a photo (base64, <= 1MB, saved inactive for rating)
      description: |
        Accepts a base64-encoded image and a mime type. Validates that decoded size <= 1MB.
        Stores the photo with isActiveForRating=false. The image is stored and returned as base64.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [dataBase64, mimeType]
              properties:
                dataBase64:
                  type: string
                  description: Base64-encoded image string (may include data URL prefix)
                mimeType:
                  type: string
                  example: image/jpeg
      responses:
        '201':
          description: Photo uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  photo:
                    $ref: '#/components/schemas/Photo'
        '400':
          description: Bad request (validation error)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          description: Server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/photos/my:
    get:
      tags: [photos]
      summary: Get my photos with aggregated rating statistics
      description: |
        Returns a list of photos owned by the current user along with aggregated statistics:
        - overall average rating and count
        - breakdown by rater gender
        - breakdown by rater age groups (0-17, 18-24, 25-34, 35-44, 45-54, 55+, unknown)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of photos with stats
          content:
            application/json:
              schema:
                type: object
                properties:
                  photos:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string }
                        ownerId: { type: string }
                        dataBase64: { type: string }
                        mimeType: { type: string, nullable: true }
                        isActiveForRating: { type: boolean }
                        createdAt: { type: string, format: date-time }
                        stats:
                          type: object
                          properties:
                            overall:
                              type: object
                              properties:
                                average: { type: number, nullable: true }
                                count: { type: integer }
                            byGender:
                              type: object
                              additionalProperties:
                                type: object
                                properties:
                                  average: { type: number }
                                  count: { type: integer }
                            byAgeGroup:
                              type: object
                              additionalProperties:
                                type: object
                                properties:
                                  average: { type: number }
                                  count: { type: integer }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          description: Server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/photos/{photoId}/toggle-active:
    post:
      tags: [photos]
      summary: Toggle photo active state for rating participation
      description: |
        Toggles or sets isActiveForRating. When enabling, the owner must have at least 1 point.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: photoId
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                active:
                  type: boolean
                  description: Desired state. If omitted, the state will be toggled.
      responses:
        '200':
          description: Updated photo state
          content:
            application/json:
              schema:
                type: object
                properties:
                  photo:
                    $ref: '#/components/schemas/Photo'
        '400':
          description: Bad request (e.g., insufficient points)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '401': { description: Unauthorized }
        '404':
          description: Photo not found or not owned by user
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500': { description: Server error }

  /api/ratings/next:
    get:
      tags: [ratings]
      summary: Get next photo for rating by filters
      description: |
        Returns a single random photo active for rating that matches the provided or default filters.
        Excludes: user's own photos, already rated by the user, and photos whose owners do not meet filters.
        If no query parameters are provided, defaults are taken from user.filterSettings.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: gender
          schema:
            type: string
            enum: [male, female, other, any]
          description: Owner gender filter. Defaults to user.filterSettings.gender or 'any'.
        - in: query
          name: ageFrom
          schema:
            type: integer
            minimum: 0
            maximum: 120
          description: Owner age lower bound (inclusive). Defaults to user.filterSettings.ageFrom.
        - in: query
          name: ageTo
          schema:
            type: integer
            minimum: 0
            maximum: 120
          description: Owner age upper bound (inclusive). Defaults to user.filterSettings.ageTo.
      responses:
        '200':
          description: Next photo to rate
          content:
            application/json:
              schema:
                type: object
                properties:
                  photo:
                    type: object
                    properties:
                      id: { type: string }
                      dataBase64: { type: string }
                      mimeType: { type: string, nullable: true }
                      isActiveForRating: { type: boolean }
                  owner:
                    type: object
                    properties:
                      id: { type: string }
                      gender: { type: string, nullable: true }
                      age: { type: integer, nullable: true }
        '400':
          description: Bad request (invalid filters)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '401': { description: Unauthorized }
        '404':
          description: No photo found for these filters
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500': { description: Server error }

  /api/ratings:
    post:
      tags: [ratings]
      summary: Create a rating and update points in a transaction
      description: |
        Creates a unique rating per {photoId, raterId}. In a single transaction:
        1) creates the rating,
        2) adds +1 point to the rater,
        3) deducts -1 point from the photo owner (rejected if owner would go below 0).
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [photoId, value]
              properties:
                photoId:
                  type: string
                value:
                  type: integer
                  minimum: 1
                  maximum: 5
      responses:
        '201':
          description: Rating created and balances updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  rating:
                    type: object
                    properties:
                      photoId: { type: string }
                      value: { type: integer }
                  balances:
                    type: object
                    properties:
                      rater: { type: integer }
                      owner: { type: integer }
        '400':
          description: Bad request (e.g., invalid value, insufficient owner points)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '401': { description: Unauthorized }
        '404': { description: Photo or user not found }
        '409':
          description: Duplicate rating
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500': { description: Server error }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserPublic:
      type: object
      properties:
        id: { type: string }
        email: { type: string }
        name: { type: string, nullable: true }
        points: { type: integer }
        gender: { type: string, nullable: true, enum: [male, female, other] }
        age: { type: integer, nullable: true }
        filterSettings:
          type: object
          properties:
            gender: { type: string, enum: [any, male, female, other] }
            ageFrom: { type: integer, nullable: true, minimum: 0, maximum: 120 }
            ageTo: { type: integer, nullable: true, minimum: 0, maximum: 120 }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Photo:
      type: object
      properties:
        id: { type: string }
        ownerId: { type: string }
        dataBase64: { type: string }
        mimeType: { type: string, nullable: true }
        isActiveForRating: { type: boolean }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Rating:
      type: object
      properties:
        id: { type: string }
        photoId: { type: string }
        raterId: { type: string }
        ownerId: { type: string }
        value: { type: integer, minimum: 1, maximum: 5 }
        createdAt: { type: string, format: date-time }
    PointsBalance:
      type: object
      properties:
        id:
          type: string
          description: User id
        points:
          type: integer
          description: Current points balance
    Error:
      type: object
      properties:
        error: { type: string }
        details:
          type: object
          nullable: true
          additionalProperties: true
